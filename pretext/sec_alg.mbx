
<section xml:id="sec_alg">
  <title>Some algorithms of elementary number theory</title>
  <p>
    An <index><main>algorithm</main></index><em>algorithm</em> is simply a set of clear
    instructions for achieving
    some task. The Persian mathematician and astronomer
    Al-Khwarizmi<fn>Abu Ja'far Muhammad ibn Musa al-Khwarizmi</fn> was a
    scholar at the House of Wisdom in Baghdad who lived in the 8th and 9th
    centuries A.D. He is remembered for his algebra treatise <em>Hisab
    al-jabr w'al-muqabala</em> from which we derive the very <em>word</em>
    <q>algebra,</q> and a text on the Hindu-Arabic numeration scheme.
  </p>

  <blockquote>
  Al-Khwarizmi also wrote a treatise on Hindu-Arabic numerals. The
  Arabic text is lost but a Latin translation, <em>Algoritmi de numero
  Indorum</em> (in English <em>Al-Khwarizmi on the Hindu Art of Reckoning</em>) gave
  rise to the word algorithm deriving from his name in the
  title.<nbsp /><nbsp /><xref ref="HisMathArch" />
  </blockquote>

  <p>
    While the study of algorithms is more properly a subject within
    Computer Science, a student of Mathematics can derive considerable
    benefit from it.
  </p>

  <p>
    There is a big difference between an algorithm description intended
    for human consumption and one meant for a computer<fn>The 
    whole history of Computer Science could be
      described as the slow advance whereby computers have become  able to
      utilize more and more abstracted descriptions of algorithms. 
      Perhaps in the not-too-distant future machines will be capable of
      understanding instruction sets that currently require human interpreters.</fn>.
    The two favored human-readable forms for describing
    algorithms are <index><main>pseudocode</main></index> pseudocode and <index><main>flowchart</main></index>
    flowcharts. The former is text-based
    and the latter is visual. There are many different modules from which
    one can build algorithmic structures: for-next loops, do-while loops, if-then
    statements, goto statements, switch-case structures, etc. We'll use
    a minimal subset of the choices available.
    <ul>
      <li>
        <p>
          Assignment statements
        </p>
      </li>

      <li>
        <p>
          If-then control statements
        </p>
      </li>

      <li>
        <p>
          Goto statements
        </p>
      </li>

      <li>
        <p>
          Return
        </p>
      </li>
    </ul>
  </p>

  <p>
    We take the view that an algorithm is something like a function, it
    takes for its input a list of parameters that describe a particular
    case of some general problem, and produces as its output a solution to
    that problem. (It should be noted that there are other possibilities <mdash /> some programs require that the variable in which the output is to
    be placed be handed them as an input parameter, others have no
    specific output, their purpose is achieved as a side-effect.) The
    intermediary between input and output is the algorithm instructions
    themselves and a set of so-called local variables which are used much
    the way scrap paper is used in a hand calculation <mdash /> intermediate
    calculations are written on them, but they are tossed aside once the
    final answer has been calculated.
  </p>

  <p>
    Assignment statements allow us to do all kinds of arithmetic
    operations (or rather to think of these types of operations as being
    atomic.) In actuality even a simple procedure like adding two numbers
    requires an algorithm of sorts, we'll avoid such a fine level of
    detail. Assignments consist of evaluating some (possibly quite
    complicated) formula in the inputs and local variables and assigning
    that value to some local variable. The two uses of the phrase <q>local
    variable</q> in the previous sentence do not need to be distinct, thus
    <m>x = x + 1</m> is a perfectly legal assignment.
  </p>

  <p>
    If-then control statements are decision makers. They first calculate
    a Boolean expression (this is just a fancy way of saying something
    that is either <c>true</c> or <c>false</c>), and send program flow to
    different locations depending on that result. A small example will
    serve as an illustration. Suppose that in the body of an algorithm we
    wish to check if 2 variables, <m>x</m> and <m>y</m> are equal, and if they are,
    increment <m>x</m> by 1. This is illustrated in <xref ref="fig_if-then">Figure</xref>
    both in pseudocode and as a flowchart.
  </p>

  <table xml:id="fig_if-then" >
    <caption>A small example in pseudocode and as a flowchart</caption>
    <tabular>
      <row>
        <cell>\figureinput{figures/if-then_flowchart.tex}</cell>
        <cell></cell>
        <cell>\begin{minipage}[b]{.3\textwidth}
         If <m>x=y</m> then</cell>
      </row>
      <row>
        <cell><m>x=x+1</m></cell>
      </row>
      <row>
        <cell>End If</cell>
      </row>
      <row>
        <cell>\vdots</cell>
      </row>
    </tabular>
  </table>

  <p>
    Notice the use of indentation in the pseudocode example to indicate
    the statements that are executed if the Boolean expression is true.
    These examples also highlight the difference between the two senses
    that the word <q>equals</q> (and the symbol <m>=</m>) has. In the Boolean
    expression the sense is that of <em>testing</em> equality, in the
    assignment statements (as the name implies) an <em>assignment</em> is
    being made. In many programming languages this distinction is made
    explicit, for instance in the C language equality testing is done via
    the symbol <q>==</q> whereas assignment is done using a single equals
    sign (<m>=</m>). In Mathematics the equals sign usually indicates equality
    testing, when the assignment sense is desired the word <q>let</q> will
    generally precede the equality.
  </p>

  <p>
    While this brief introduction to the means of notating algorithms is by no
    means complete, it is hopefully sufficient for our purpose which is
    solely to introduce two algorithms that are important in elementary
    number theory. The <index><main>division algorithm</main></index> division algorithm,
    as presented here, is simply
    an explicit version of the process one follows to calculate a quotient
    and remainder using long division. The procedure we give is unusually
    inefficient <mdash /> with very little thought one could devise an algorithm
    that would produce the desired answer using many fewer operations <mdash /> however the main point here is purely to show that division can be
    accomplished by essentially mechanical means. The Euclidean algorithm
    is far more interesting both from a theoretical and a practical
    perspective. The Euclidean algorithm computes the greatest common
    divisor (gcd) of two integers. The gcd of of two numbers <m>a</m> and <m>b</m>
    is denoted <m>\gcd{a}{b}</m> and is the largest integer that divides both
    <m>a</m> and <m>b</m> evenly.
  </p>

  <p>
    A pseudocode outline of the division algorithm is as follows:
  </p>

  <p>
    \begin{minipage}[b]{.5\textwidth}
    Algorithm: Division
  </p>

  <p>
    Inputs: integers <m>n</m> and <m>d</m>.
  </p>

  <p>
    Local variables: <m>q</m> and <m>r</m>.
  </p>

  <p>
    Let <m>q = 0</m>.
  </p>

  <p>
    Let <m>r = n</m>.
  </p>

  <p>
    Label 1.
  </p>

  <p>
    If <m>r \lt  d</m> then
  </p>

  <p>
    Return <m>q</m> and <m>r</m>.
  </p>

  <p>
    End If
  </p>

  <p>
    Let <m>q = q + 1</m>.
  </p>

  <p>
    Let <m>r = r - d</m>.
  </p>

  <p>
    Goto 1.
  </p>

  <p>
    This same algorithm is given in flowchart form in
    <xref ref="fig_div_alg">Figure</xref>.
  </p>

  <figure xml:id="fig_div_alg" >
    <caption>The division algorithm in flowchart form.</caption>
    <image source=""/>
  </figure>

  <p>
    Note that in a flowchart the action of a <q>Goto</q> statement is clear
    because an arrow points to the location where program flow is being
    redirected. In pseudocode a <q>Label</q> statement is required which
    indicates a spot where flow can be redirected via subsequent <q>Goto</q>
    statements. Because of the potential for confusion in complicated
    algorithms that involve multitudes of Goto statements and their
    corresponding Labels, this sort of redirection is now deprecated in
    virtually all popular programming environments.
  </p>

  <p>
    Before we move on to describe the Euclidean algorithm it might be
    useful to describe more explicitly what exactly it's <em>for</em>.
    Given a pair of integers, <m>a</m> and <m>b</m>, there are two quantities that
    it is important to be able to compute, the <index><main>least common multiple</main></index>
    <em>least common multiple</em>
    or lcm, and the <index><main>greatest common divisor</main></index>
    <em>greatest common divisor</em> or gcd. The lcm also
    goes by the name <em>lowest common denominator</em> because it is the
    smallest denominator that could be used as a common denominator in the
    process of adding two fractions that had <m>a</m> and <m>b</m> in their
    denominators. The gcd and the lcm are related by the formula
    <me>
      \lcm{a}{b} = \frac{ab}{\gcd{a}{b}},
    </me>
    so they are essentially equivalent as far as representing a
    computational challenge.
  </p>

  <p>
    The <index><main>Euclidean algorithm</main></index> Euclidean algorithm depends
    on a rather extraordinary property of
    the gcd. Suppose that we are trying to compute <m>\gcd{a}{b}</m> and that
    <m>a</m> is the larger of the two numbers. We first feed <m>a</m> and <m>b</m> into
    the division algorithm to find <m>q</m> and <m>r</m> such that <m>a = qb +r</m>. It
    turns out that <m>b</m> and <m>r</m> have the <em>same</em> gcd as did <m>a</m> and
    <m>b</m>. In other words, <m>\gcd{a}{b} = \gcd{b}{r}</m>, furthermore these
    numbers are smaller than the ones we started with! This is nice
    because it means we're now dealing with an easier version of the same
    problem. In designing an algorithm it is important to formulate a
    clear <em>ending criterion</em>, a condition that tells you you're done.
    In the case of the Euclidean algorithm, we know we're done when the
    remainder <m>r</m> comes out <m>0</m>.
  </p>

  <p>
    So, here, without further ado is the Euclidean algorithm in
    pseudocode. A flowchart version is given in <xref ref="fig_Euc_alg">Figure</xref>.
  </p>

  <p>
    \begin{minipage}[b]{.7\textwidth}
    Algorithm: Euclidean
  </p>

  <p>
    Inputs: integers <m>a</m> and <m>b</m>.
  </p>

  <p>
    Local variables: <m>q</m> and <m>r</m>.
  </p>

  <p>
    Label 1.
  </p>

  <p>
    Let <m>(q,r)  = \mbox{Division} (a,b)</m>.
  </p>

  <p>
    If <m>r = 0</m> then
  </p>

  <p>
    Return <m>b</m>.
  </p>

  <p>
    End If
  </p>

  <p>
    Let <m>a = b</m>.
  </p>

  <p>
    Let <m>b = r</m>.
  </p>

  <p>
    Goto 1.
  </p>

  <figure xml:id="fig_Euc_alg" >
    <caption>The Euclidean algorithm in flowchart form.</caption>
    <image source=""/>
  </figure>

  <p>
    It should be noted that for small numbers one can find the gcd and lcm
    quite easily by considering their factorizations into primes. For the
    moment consider numbers that factor into primes but not into prime
    powers (that is, their factorizations don't involve exponents). The
    gcd is the product of the primes that are in common between these
    factorizations (if there are no primes in common it is 1). The lcm is
    the product of all the distinct primes
    that appear in the factorizations. As an example, consider 30 and 42.
    The factorizations are <m>30 = 2\cdot 3\cdot 5</m> and <m>42 = 2\cdot 3 \cdot
    7</m>. The primes that are common to both factorizations are <m>2</m> and
    <m>3</m>, thus <m>\gcd{30}{42} = 2\cdot 3 = 6</m>. The set of all the primes
    that appear in either factorization is <m>\{2, 3, 5, 7 \}</m> so
    <m>\lcm{30}{42} = 2\cdot 3\cdot 5\cdot 7 = 210</m>.
  </p>

  <p>
    The technique just described is of little value for numbers having more
    than about 50 decimal digits because it rests <em>a priori</em> on the
    ability to find the prime factorizations of the numbers involved.
    Factoring numbers is easy enough if they're reasonably small,
    especially if some of their prime factors are small, but in general
    the problem is considered so difficult that many cryptographic schemes
    are based on it.
  </p>
  <exercises>
    <exercise>
      <statement>
        <p>
          Trace through the division algorithm with inputs <m>n=27</m> and
          <m>d=5</m>, each time an assignment statement is encountered write it
          out. How many assignments are involved in this particular
          computation?
        </p>
      </statement>
      <hint>
        <p>
          r=27
          q=0
          r=27-5=22
          q=0+1=1
          r=22-5=17
          q=1+1=2
          r=17-5=12
          q=2+1=3
          r=12-5=7
          q=3+1=4
          r=7-5=2
          q=4+1=5
          return r is 2 and q is 5.
        </p>
      </hint>
    </exercise>
    <exercise>
      <statement>
        <p>
          Find the gcd's and lcm's of the following pairs of numbers.
        </p>
        <tabular>
          <row bottom="minor">
            <cell></cell>
            <cell></cell>
            <cell></cell>
            <cell></cell>
          </row>
          <row>
            <cell><m>a</m></cell>
            <cell><m>b</m></cell>
            <cell><m>\gcd{a}{b}</m></cell>
            <cell><m>\lcm{a}{b}</m></cell>
          </row>
          <row bottom="minor">
            <cell></cell>
            <cell></cell>
            <cell></cell>
            <cell></cell>
          </row>
          <row>
            <cell>110</cell>
            <cell>273</cell>
            <cell></cell>
            <cell></cell>
          </row>
          <row bottom="minor">
            <cell></cell>
            <cell></cell>
            <cell></cell>
            <cell></cell>
          </row>
          <row>
            <cell>105</cell>
            <cell>42</cell>
            <cell></cell>
            <cell></cell>
          </row>
          <row bottom="minor">
            <cell></cell>
            <cell></cell>
            <cell></cell>
            <cell></cell>
          </row>
          <row>
            <cell>168</cell>
            <cell>189</cell>
            <cell></cell>
            <cell></cell>
          </row>
          <row bottom="minor">
            <cell></cell>
            <cell></cell>
            <cell></cell>
            <cell></cell>
          </row>
        </tabular>
      </statement>
      <hint>
        <p>
          For such small numbers you can just find their prime factorizations and use that, although it might be useful to practice your understanding of the Euclidean algorithm by tracing through it to find the gcd's and then using the formula
          <me>
            \lcm (a,b) = \frac{ab}{\gcd (a,b).}
          </me>
        </p>
      </hint>
    </exercise>
    <exercise>
      <statement>
        <p>
          Formulate a description of the gcd of two numbers in terms of
          their prime factorizations in the general case (when the
          factorizations may include powers of the primes involved).
        </p>
      </statement>
      <hint>
        <p>
          Suppose that one number's prime factorization contains <m>p^e</m> and the other
          contains <m>p^f</m>, where <m>e \lt  f</m>. What power of <m>p</m> will divide both, <m>p^e</m> or <m>p^f</m> ?
        </p>
      </hint>
    </exercise>
    <exercise>
      <statement>
        <p>
          Trace through the Euclidean algorithm with inputs <m>a=3731</m> and
          <m>b=2730</m>, each time the assignment statement that calls the division
          algorithm is encountered write out the expression <m>a=qb+r</m>. (With the
          actual values involved !)
        </p>
      </statement>
      <hint>
        <p>
          The quotients you obtain should alternate between 1 and 2.
        </p>
      </hint>
    </exercise>
  </exercises>
</section>
